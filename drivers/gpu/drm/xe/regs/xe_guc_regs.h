/* SPDX-License-Identifier: MIT */
/*
 * Copyright Â© 2022 Intel Corporation
 */

#ifndef _XE_GUC_REGS_H_
#define _XE_GUC_REGS_H_

#include <linux/compiler.h>
#include <linux/types.h>

#include "regs/xe_reg_defs.h"

/* Definitions of GuC H/W registers, bits, etc */

#define GUC_STATUS			_MMIO(0xc000)
#define   GS_AUTH_STATUS_MASK		REG_GENMASK(31, 30)
#define   GS_AUTH_STATUS_BAD		REG_FIELD_PREP(GS_AUTH_STATUS_MASK, 0x1)
#define   GS_AUTH_STATUS_GOOD		REG_FIELD_PREP(GS_AUTH_STATUS_MASK, 0x2)
#define   GS_MIA_MASK			REG_GENMASK(18, 16)
#define   GS_MIA_CORE_STATE		REG_FIELD_PREP(GS_MIA_MASK, 0x1)
#define   GS_MIA_HALT_REQUESTED		REG_FIELD_PREP(GS_MIA_MASK, 0x2)
#define   GS_MIA_ISR_ENTRY		REG_FIELD_PREP(GS_MIA_MASK, 0x4)
#define   GS_UKERNEL_MASK		REG_GENMASK(15, 8)
#define   GS_BOOTROM_MASK		REG_GENMASK(7, 1)
#define   GS_BOOTROM_RSA_FAILED		REG_FIELD_PREP(GS_BOOTROM_MASK, 0x50)
#define   GS_BOOTROM_JUMP_PASSED	REG_FIELD_PREP(GS_BOOTROM_MASK, 0x76)
#define   GS_MIA_IN_RESET		REG_BIT(0)

#define SOFT_SCRATCH(n)			_MMIO(0xc180 + (n) * 4)
#define SOFT_SCRATCH_COUNT		16

#define UOS_RSA_SCRATCH(i)		_MMIO(0xc200 + (i) * 4)
#define UOS_RSA_SCRATCH_COUNT		64

#define DMA_ADDR_0_LOW			_MMIO(0xc300)
#define DMA_ADDR_0_HIGH			_MMIO(0xc304)
#define DMA_ADDR_1_LOW			_MMIO(0xc308)
#define DMA_ADDR_1_HIGH			_MMIO(0xc30c)
#define   DMA_ADDR_SPACE_MASK		REG_GENMASK(20, 16)
#define   DMA_ADDRESS_SPACE_WOPCM	REG_FIELD_PREP(DMA_ADDR_SPACE_MASK, 7)
#define DMA_COPY_SIZE			_MMIO(0xc310)
#define DMA_CTRL			_MMIO(0xc314)
#define   HUC_UKERNEL			REG_BIT(9)
#define   UOS_MOVE			REG_BIT(4)
#define   START_DMA			REG_BIT(0)
#define DMA_GUC_WOPCM_OFFSET		_MMIO(0xc340)
#define   GUC_WOPCM_OFFSET_SHIFT	14
#define   GUC_WOPCM_OFFSET_MASK		REG_GENMASK(31, GUC_WOPCM_OFFSET_SHIFT)
#define   HUC_LOADING_AGENT_GUC		REG_BIT(1)
#define   GUC_WOPCM_OFFSET_VALID	REG_BIT(0)
#define GUC_MAX_IDLE_COUNT		_MMIO(0xc3e4)

#define HUC_STATUS2			_MMIO(0xd3b0)
#define   HUC_FW_VERIFIED		REG_BIT(7)

#define GEN11_HUC_KERNEL_LOAD_INFO	_MMIO(0xc1dc)
#define   HUC_LOAD_SUCCESSFUL		REG_BIT(0)

#define GUC_WOPCM_SIZE			_MMIO(0xc050)
#define   GUC_WOPCM_SIZE_MASK		REG_GENMASK(31, 12)
#define   GUC_WOPCM_SIZE_LOCKED		REG_BIT(0)

#define GEN8_GT_PM_CONFIG		_MMIO(0x138140)
#define GEN9LP_GT_PM_CONFIG		_MMIO(0x138140)
#define GEN9_GT_PM_CONFIG		_MMIO(0x13816c)
#define   GT_DOORBELL_ENABLE		REG_BIT(0)

#define GEN8_GTCR			_MMIO(0x4274)
#define   GEN8_GTCR_INVALIDATE		REG_BIT(0)

#define GEN12_GUC_TLB_INV_CR			_MMIO(0xcee8)
#define   GEN12_GUC_TLB_INV_CR_INVALIDATE	REG_BIT(0)

#define GUC_ARAT_C6DIS				_MMIO(0xa178)

#define GUC_SHIM_CONTROL			_MMIO(0xc064)
#define   PVC_GUC_MOCS_INDEX_MASK		REG_GENMASK(25, 24)
#define   PVC_GUC_MOCS_UC_INDEX			1
#define   PVC_GUC_MOCS_INDEX(index)		REG_FIELD_PREP(PVC_GUC_MOCS_INDEX_MASK, \
							       index)
#define   GUC_GEN10_SHIM_WC_ENABLE		REG_BIT(21)
#define   GUC_ENABLE_MIA_CLOCK_GATING		REG_BIT(15)
#define   GUC_ENABLE_READ_CACHE_FOR_WOPCM_DATA	REG_BIT(10)
#define   GUC_ENABLE_READ_CACHE_FOR_SRAM_DATA	REG_BIT(9)
#define   GUC_GEN10_MSGCH_ENABLE		REG_BIT(4)
#define   GUC_ENABLE_MIA_CACHING		REG_BIT(2)
#define   GUC_ENABLE_READ_CACHE_LOGIC		REG_BIT(1)
#define   GUC_DISABLE_SRAM_INIT_TO_ZEROES	REG_BIT(0)


#define GUC_SEND_INTERRUPT			_MMIO(0xc4c8)
#define   GUC_SEND_TRIGGER			REG_BIT(0)
#define GEN11_GUC_HOST_INTERRUPT		_MMIO(0x1901f0)

#define GUC_NUM_DOORBELLS			256

/* format of the HW-monitored doorbell cacheline */
struct guc_doorbell_info {
	u32 db_status;
#define GUC_DOORBELL_DISABLED			0
#define GUC_DOORBELL_ENABLED			1

	u32 cookie;
	u32 reserved[14];
} __packed;

#define GEN8_DRBREGL(x)				_MMIO(0x1000 + (x) * 8)
#define   GEN8_DRB_VALID			REG_BIT(0)
#define GEN8_DRBREGU(x)				_MMIO(0x1000 + (x) * 8 + 4)

#define GEN12_DIST_DBS_POPULATED		_MMIO(0xd08)
#define   GEN12_DOORBELLS_PER_SQIDI_MASK	REG_GENMASK(23, 16)
#define   GEN12_SQIDIS_DOORBELL_EXIST_MASK	REG_GENMASK(15, 0)

#define GUC_BCS_RCS_IER				_MMIO(0xC550)
#define GUC_VCS2_VCS1_IER			_MMIO(0xC554)
#define GUC_WD_VECS_IER				_MMIO(0xC558)
#define GUC_PM_P24C_IER				_MMIO(0xC55C)

#define VF_SW_FLAG(n)			_MMIO(0x190240 + (n) * 4)
#define VF_SW_FLAG_COUNT		4

#define MED_VF_SW_FLAG(n)		_MMIO(0x190310 + (n) * 4)
#define MED_VF_SW_FLAG_COUNT		4

/* GuC Interrupt Vector */
#define GUC_INTR_GUC2HOST			BIT(15)
#define GUC_INTR_EXEC_ERROR			BIT(14)
#define GUC_INTR_DISPLAY_EVENT			BIT(13)
#define GUC_INTR_SEM_SIG			BIT(12)
#define GUC_INTR_IOMMU2GUC			BIT(11)
#define GUC_INTR_DOORBELL_RANG			BIT(10)
#define GUC_INTR_DMA_DONE			BIT(9)
#define GUC_INTR_FATAL_ERROR			BIT(8)
#define GUC_INTR_NOTIF_ERROR			BIT(7)
#define GUC_INTR_SW_INT_6			BIT(6)
#define GUC_INTR_SW_INT_5			BIT(5)
#define GUC_INTR_SW_INT_4			BIT(4)
#define GUC_INTR_SW_INT_3			BIT(3)
#define GUC_INTR_SW_INT_2			BIT(2)
#define GUC_INTR_SW_INT_1			BIT(1)
#define GUC_INTR_SW_INT_0			BIT(0)

#endif
